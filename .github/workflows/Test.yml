name: Test

on:
  pull_request:
    branches:
      - "*" # matches every branch
      - "*/*" # matches every branch containing a single '/'
  push:
    branches:
      - master
      - main
#     - devel
#     - develop
#     - development

jobs:
  build:
    runs-on: ubuntu-latest

    # runs all of the steps inside the specified container rather than on the VM host.
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image: node:latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@main
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - name: Checkout
        uses: actions/checkout@main
      - name: BUILD
        uses: judahh/nodeBuild@main
        with:
          node_version: ${{ matrix.node-version }}
      - name: TEST
        uses: judahh/yarnTest@main
        with:
          run_integration: 'false'
      - name: ZIP TO ARTIFACT
        uses: judahh/zipToArtifact@main
        with:
          production: true
          addTests: true
          tests: 'tests/ test/ *test.* *config.* source/ database/'

  pgsql:
    needs: [build]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER: postgres
          POSTGRES_DB: read_DB
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@main
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - name: ARTIFACT TO UNZIP
        uses: judahh/artifactToUnzip@main
        with:
          production: true
      - name: TEST
        uses: judahh/yarnTest@main
        with:
          run_test: 'false'
          integration_filter: 'pgsql'
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          POSTGRES_USER: "postgres"
          MONGO_HOST: mongo
          MONGO_PORT: ${{ job.services.mongo.ports[27017] }}

  mssql:
    needs: [build]
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

      mssql:
        image: "mcr.microsoft.com/mssql/server:latest"
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: yourStrong(!)Password
          MSSQL_PID: Developer

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@main
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - name: ARTIFACT TO UNZIP
        uses: judahh/artifactToUnzip@main
        with:
          production: true
      - name: TEST
        uses: judahh/yarnTest@main
        with:
          run_test: 'false'
          integration_filter: 'mssql'
        env:
          # use postgres for the host here because we have specified a container for the job.
          # If we were running the job on the VM this would be localhost
          MONGO_HOST: mongo
          MONGO_PORT: ${{ job.services.mongo.ports[27017] }}
          MSSQL_HOST: mssql
          MSSQL_PORT: ${{ job.services.mssql.ports[1433] }}
          MSSQL_USER: "sa"
